#!/usr/bin/env python3

import os
from subprocess import Popen, PIPE, STDOUT
from argparse import ArgumentParser


def read_song(key, infile, outfile):
    ''' reads an encrypted song drm file
    Args:
        key:
            128-bit key
        infile:
            path to encrypted drm
        outfile:
            path to save file
    '''
    
    drm_file = open(os.path.abspath(infile), 'rb')
    wav_file = open(os.path.abspath(outfile), 'wb')

    # Get relevant sections of DRM
    nonce, ciphertext = [ drm_file.read(x) for x in (16, -1) ]
    # Decrypt and check tag to ensure integrity
    p = Popen(['./speck', '-d'], stdout=PIPE, stdin=PIPE, stderr=PIPE)
    speck_input = b''.join([nonce, key, f'{len(ciphertext):012d}'.encode(), ciphertext])
    plaintext = p.communicate(input=speck_input)[0]
    # Write plaintext to wav file
    wav_file.write(plaintext)
    wav_file.close()
    drm_file.close()


def main():
    parser = ArgumentParser(description='main interface to unprotect songs')
    parser.add_argument('--outfile', help='path to save the unprotected song', required=True)
    parser.add_argument('--infile', help='path to protected song', required=True)
    args = parser.parse_args()

    f = open('/home/vagrant/DRM_KEY.txt','r')
    key = bytes.fromhex(f.readline().strip())
    f.close()

    read_song(key, args.infile, args.outfile)


if __name__ == '__main__':
    main()
